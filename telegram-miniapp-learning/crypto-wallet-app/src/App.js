import React, { useState, useEffect } from 'react';
import 'bootstrap/dist/css/bootstrap.min.css';
import { Button } from 'react-bootstrap';
import { ChevronDown, ChevronUp, ArrowUpRight, ArrowDownLeft } from 'lucide-react';
import { useTelegram } from './hooks/useTelegram';
import './App.css';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function UserProfile({ user, isInTelegram }) {
  if (!isInTelegram) {
    return (
      <div className="user-profile">
        <div className="warning">
          ‚ö†Ô∏è –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        </div>
      </div>
    );
  }

  return (
    <div className="user-profile">
      <div className="user-avatar">
        {user?.first_name?.charAt(0) || '?'}
      </div>
      <div className="user-info">
        <h2>{user?.first_name} {user?.last_name}</h2>
        <p>@{user?.username || '–±–µ–∑ username'}</p>
        <span className="user-id">ID: {user?.id}</span>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ—à–µ–ª—å–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
function WalletBalance() {
  const [balance, setBalance] = useState({
    ton: 0.00,
    usdt: 0.00,
    eth: 0.00
  });

  const { hapticFeedback } = useTelegram();

  const handleRefresh = () => {
    hapticFeedback('impact', 'light');
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    setBalance({
      ton: (Math.random() * 100).toFixed(2),
      usdt: (Math.random() * 1000).toFixed(2),
      eth: (Math.random() * 10).toFixed(4)
    });
  };

  return (
    <div className="wallet-balance">
      <div className="balance-header">
        <h3>üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞</h3>
        <button className="refresh-btn" onClick={handleRefresh}>
          üîÑ
        </button>
      </div>
      
      <div className="balance-cards">
        <div className="balance-card">
          <div className="currency">TON</div>
          <div className="amount">{balance.ton}</div>
        </div>
        
        <div className="balance-card">
          <div className="currency">USDT</div>
          <div className="amount">{balance.usdt}</div>
        </div>
        
        <div className="balance-card">
          <div className="currency">ETH</div>
          <div className="amount">{balance.eth}</div>
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
function ActionButtons() {
  const { showAlert, hapticFeedback, showConfirm } = useTelegram();

  const handleSend = () => {
    hapticFeedback('impact', 'medium');
    showAlert('–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö!');
  };

  const handleReceive = () => {
    hapticFeedback('selection');
    showAlert('–ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è: TON_ADDRESS_PLACEHOLDER');
  };

  const handleSwap = () => {
    hapticFeedback('impact', 'heavy');
    showConfirm('–û—Ç–∫—Ä—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±–º–µ–Ω–∞?', (confirmed) => {
      if (confirmed) {
        showAlert('–§—É–Ω–∫—Ü–∏—è –æ–±–º–µ–Ω–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!');
      }
    });
  };

  return (
    <div className="action-buttons">
      <button className="action-btn send" onClick={handleSend}>
        üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å
      </button>
      <button className="action-btn receive" onClick={handleReceive}>
        üì• –ü–æ–ª—É—á–∏—Ç—å
      </button>
      <button className="action-btn swap" onClick={handleSwap}>
        üîÑ –û–±–º–µ–Ω—è—Ç—å
      </button>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
function TransactionHistory() {
  const [isOpen, setIsOpen] = useState(false)
  const toggleHistory = () => {
    setIsOpen(!isOpen)
  }
  const [transactions] = useState([
    {
      id: 1,
      type: "receive",
      amount: "+5.25 TON",
      date: "2024-01-15",
      status: "completed",
    },
    {
      id: 2,
      type: "send",
      amount: "-2.10 USDT",
      date: "2024-01-14",
      status: "completed",
    },
    {
      id: 3,
      type: "swap",
      amount: "0.1 ETH ‚Üí 150 USDT",
      date: "2024-01-13",
      status: "pending",
    },
  ]);

  return (
    <>
    <Button variant="primary" className='history-btn' size="lg" onClick={toggleHistory}>
      <span style={{borderRight: "1px solid white", marginRight: "15px", padding: "10px"}}>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</span>
     {isOpen ? (<ChevronUp className="w-5 h-5 text-gray-500" />) : (<ChevronDown className="w-5 h-5 text-gray-500" />)}
      </Button>
      <div className="transaction-history">
        <h3>üìà –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π </h3>
        <div className="transactions-list">
          {transactions.map((tx) => (
            <div key={tx.id} className={`transaction ${tx.type}`}>
              <div className="tx-info">
                <div className="tx-amount">{tx.amount}</div>
                <div className="tx-date">{tx.date}</div>
              </div>
              <div className={`tx-status ${tx.status}`}>
                {tx.status === "completed" ? "‚úÖ" : "‚è≥"}
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function App() {
  const { user, isLoading, isInTelegram, colorScheme, setMainButton } =
    useTelegram();

  useEffect(() => {
    if (isInTelegram) {
      setMainButton(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        () => {
          alert("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)");
        },
        true
      );
    }
  }, [isInTelegram, setMainButton]);

  if (isLoading) {
    return (
      <div className="app-loading">
        <div className="spinner"></div>
        <p>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞...</p>
      </div>
    );
  }

  return (
    <div className={`App ${colorScheme}`}>
      <div className="app-container">
        <UserProfile user={user} isInTelegram={isInTelegram} />

        {isInTelegram && (
          <>
            <WalletBalance />
            <ActionButtons />
            <TransactionHistory />
          </>
        )}

        {!isInTelegram && (
          <div className="demo-mode">
            <h2>üöÄ –î–µ–º–æ —Ä–µ–∂–∏–º</h2>
            <p>–≠—Ç–æ –ø—Ä–µ–≤—å—é –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è Telegram MiniApp</p>
            <div className="demo-features">
              <div className="feature">‚úÖ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã</div>
              <div className="feature">‚úÖ Telegram Web App API</div>
              <div className="feature">‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω</div>
              <div className="feature">üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–ª–æ–∫—á–µ–π–Ω–æ–º (—Å–∫–æ—Ä–æ)</div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

export default App;